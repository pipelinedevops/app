
name: Deploy to Amazon ECR image

on:
  push:
    branches: [ "main" ]
    
env:
  AWS_ACCESS_KEY_ID: ${{ secrets.TF_AWS_LAB_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.TF_AWS_LAB_KEY }}
  AWS_REGION: us-east-1
  directory-state: 01-tfstate
  directory-repo: 02-repo                  
  directory-app: 03-image/app
  repo_name: lab_challenge
  image_name: app
  tag_name: v0.1


permissions:
  contents: read

jobs:
  configpipeline:
    name: config pipeline
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

  deploystate:
      name: 01-state
      runs-on: ubuntu-latest
      needs: configpipeline
      environment: production
      steps:
        - name: Checkout
          uses: actions/checkout@v4 
        
        - name: SetupTerraform
          uses: hashicorp/setup-terraform@v3  

        - name: deploy state
          run: |      
           terraform init -reconfigure
           terraform plan -lock=false
           terraform apply -auto-approve -lock=false

          working-directory:  ${{ env.directory-state }}   

              
  deployrepo:
     name: 02-repo
     runs-on: ubuntu-latest
     needs: deploystate
     environment: production
     steps:
       - name: Checkout
         uses: actions/checkout@v4 
       
       - name: SetupTerraform
         uses: hashicorp/setup-terraform@v3  

       - name: deployrepo
         run: |      
          terraform init -reconfigure
          terraform plan -lock=false
          terraform apply -auto-approve -lock=false

         working-directory:  ${{ env.directory-repo }}  

  deployimage:
     name: 03-image
     runs-on: ubuntu-latest
     needs: deployrepo
     environment: production
     steps:
       - name: Checkout
         uses: actions/checkout@v4 
     
       - name: deployimage
         run: |
             export AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query "Account" --output text)
                     
             aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com
     
             docker build -t ${{env.image_name}}:${{env.tag_name}}  ${{ env.directory}}
     
             docker tag ${{env.image_name}}:{{env.tag_name}} $AWS_ACCOUNT_ID.dkr.ecr.us-east-1.amazonaws.com/${{ env.repo_name }}:${{env.tag_name}}
     
             docker push $AWS_ACCOUNT_ID.dkr.ecr.us-east-1.amazonaws.com/${{ env.repo_name }}:${{env.tag_name}}
     
             aws ecr describe-images --repository-name ${{ env.repo_name }}
                 
         shell: /usr/bin/bash -e {0}
         working-directory:  ${{ env.directory-app}}  
     